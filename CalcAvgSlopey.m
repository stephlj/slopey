% function [avg_times,avg_Rvals,avg_Gvals,avg_FRET] = CalcAvgSlopey(trace_struct,t_Inj,slopey,debug)
%
% Computes one average trace from num_samples_to_avg samples generated by
% slopey.
%
% Update: If 'slopey' is zero, computes the same information from the old
% HMM (pyhsmm).
%
% Steph 11/2016

function [avg_times,avg_Rvals,avg_Gvals,avg_FRET] = CalcAvgSlopey(trace_struct,t_Inj,slopey,debug)

if ~exist('slopey','var') slopey = 1; end
if ~exist('debug','var') debug = 0; end

fig_pos = [200 400 700 500];
   

if slopey
    % Convert the start and end times to seconds instead of frames
    start_time = trace_struct.start/trace_struct.fps;
    end_time = trace_struct.end/trace_struct.fps;
    
    % Extract the perc_smpls_aggr samples to average:
    times_abs = trace_struct.times-repmat(trace_struct.offset,1,size(trace_struct.times,2))+start_time-t_Inj;
    Rvals = trace_struct.vals;
    Gvals = redtogreen(Rvals,max(Rvals,[],2),trace_struct.ch2_transform(:,1),trace_struct.ch2_transform(:,2));

    % Compute averages
    avg_times = [0,mean(times_abs,1),end_time-t_Inj];
    avg_Rvals = mean(Rvals,1);
    avg_Gvals = mean(Gvals,1);
    avg_FRET = zeros(size(avg_Rvals));
    for n = 1:size(Rvals,2) % TODO: can I avoid a for-loop here?
       avg_FRET(n) = mean(Rvals(:,n)./(Rvals(:,n)+Gvals(:,n)));
    end

else
    avg_times_temp(1) = 0;
    avg_times_temp(2) = double(trace_struct.model_durations(1)+trace_struct.start)/trace_struct.fps-t_Inj;
    
    avg_FRET(1) = double(trace_struct.model_fretseq(1)); % FRET value of twait
    avg_Rvals(1) = double(trace_struct.model_redgreenseq(1,2));
    avg_Gvals(1) = double(trace_struct.model_redgreenseq(1,1));
    FRETind = trace_struct.model_durations(1);
    
    for j = 2:length(trace_struct.model_durations)
        avg_FRET(j) = double(trace_struct.model_fretseq(FRETind+1));
        avg_Rvals(j) = double(trace_struct.model_redgreenseq(FRETind+1,2));
        avg_Gvals(j) = double(trace_struct.model_redgreenseq(FRETind+1,1));
        avg_times_temp(j+1) = avg_times_temp(j)+double(trace_struct.model_durations(j))/trace_struct.fps;
        FRETind = FRETind+trace_struct.model_durations(j);
    end
    
    % add fake slopey bits
    avg_times = zeros(length(avg_times_temp)*2-2,1);
    avg_times(1) = avg_times_temp(1);
    avg_times(end) = avg_times_temp(end);
    for f = 2:2:length(avg_times)-1
        avg_times(f) = avg_times_temp(floor(f/2)+1);
        avg_times(f+1) = avg_times_temp(floor(f/2)+1);
    end
end

    if debug
        % For debugging:
        figure('Position',fig_pos)
        if slopey
            xvectData = ((1:size(trace_struct.data,1))./trace_struct.fps);
        else
            xvectData = ((1:length(trace_struct.RedI))./trace_struct.fps);
        end
        subplot(2,1,1)
        if slopey
            plot(xvectData,medfilt2(trace_struct.data(:,1),[5,1]),'-r',...
                xvectData,medfilt2(trace_struct.data(:,2),[5,1]),'-g')
        else
            plot(xvectData,trace_struct.RedI,'-r',...
                xvectData,trace_struct.GrI,'-g')
        end
        hold on
        xlim([0 min(avg_times(end)+20,xvectData(end))])
        subplot(2,1,2)
        if slopey
            plot(xvectData,medfilt2(trace_struct.data(:,1)./(trace_struct.data(:,1)+trace_struct.data(:,2)),...
                [5,1]),'-b')
        else
            plot(xvectData,trace_struct.FRET,'-b')
        end
        hold on
        ylim([-0.2 1.2])
        xlim([0 min(avg_times(end)+20,xvectData(end))])
        for kk = 1:2:length(avg_times)
            subplot(2,1,1)
            plot([avg_times(kk)+t_Inj avg_times(kk+1)+t_Inj],[avg_Rvals(ceil(kk/2)) avg_Rvals(ceil(kk/2))],'--m')
            plot([avg_times(kk)+t_Inj avg_times(kk+1)+t_Inj],[avg_Gvals(ceil(kk/2)) avg_Gvals(ceil(kk/2))],'--c')
            if ceil(kk/2)+1<=length(avg_FRET)
                plot([avg_times(kk+1)+t_Inj avg_times(kk+2)+t_Inj],[avg_Rvals(ceil(kk/2)) avg_Rvals(ceil(kk/2)+1)],'--m')
                plot([avg_times(kk+1)+t_Inj avg_times(kk+2)+t_Inj],[avg_Gvals(ceil(kk/2)) avg_Gvals(ceil(kk/2)+1)],'--c')
            end
            subplot(2,1,2)
            plot([avg_times(kk)+t_Inj avg_times(kk+1)+t_Inj],[avg_FRET(ceil(kk/2)) avg_FRET(ceil(kk/2))],'--k')
            if ceil(kk/2)+1<=length(avg_FRET)
                plot([avg_times(kk+1)+t_Inj avg_times(kk+2)+t_Inj],[avg_FRET(ceil(kk/2)) avg_FRET(ceil(kk/2)+1)],'--k')
            end
        end
        subplot(2,1,1)
        if slopey
            title(trace_struct.name)
        end
        pause
        close
    end

    % Given red intensities and the fit parameters for green channel,
    % return non-idealized green
    function green = redtogreen(red,maxRed,a,b)
        green = repmat(a,1,size(red,2)).*(repmat(maxRed,1,size(red,2))-red)+repmat(b,1,size(red,2));
    end

end

